x<-rep(1:lrxd,each=lryd)
y<-rep(1:lryd,lrxd)
Features<- mapply(get_features_LR, x+1, y+1)
featMat[, , 1]<- t(Features[1:8, ])
featMat[, , 2]<- t(Features[9:16, ])
featMat[, , 3]<- t(Features[17:24, ])
### step 2. apply the modelList over featMat
predMat <- test(modelList, featMat)
### step 3. recover high-resolution from predMat and save in HR_dir
predMat_array <- array(predMat, c(dim(featMat)[1], 4, 3))
imgoutputhr<-array(NA,c(lryd*2,lrxd*2,3))
#predMat_recov<-array(NA,c(n_col*n_row, 4, 3))
#predMat_recov[,1,]<-
#imgHR_recov <- array(NA, c(2*n_row, 2*n_col, 3))
n_row <- dim(imgLR)[1]
n_col <- dim(imgLR)[2]
LRcenter <- array(imgLR, c(n_col*n_row, 1, 3))
for(channel in 1:3){
y23 <- as.vector(t(predMat_array[, c(1,3),channel] + LRcenter[,,channel]))
y14 <- as.vector(t(predMat_array[, c(2,4),channel] + LRcenter[,,channel]))
imgoutputhr[, seq(1, 2*n_col-1, by=2), channel] <- y23
imgoutputhr[, seq(2, 2*n_col, by=2), channel] <- y14
}
img_out<- Image(imgoutputhr, colormode="Color")
display(img_out)
mse<-c(mse,mean((imgoutputhr - testimgHR)^2))
#writeImage(img_out, paste0(anotherdir,  "img", "_", sprintf("%04d", i), ".jpg"))
### step 4. report test MSE and PSNR
testimgHR <- readImage(paste0(HR_dir,  "img", "_", sprintf("%04d", i), ".jpg"))
mse<-c(mse,mean((imgoutputhr - testimgHR)^2))
for(channel in 1:3){
y23 <- as.vector(t(predMat_array[, c(2,3),channel] + LRcenter[,,channel]))
y14 <- as.vector(t(predMat_array[, c(1,4),channel] + LRcenter[,,channel]))
imgoutputhr[, seq(1, 2*n_col-1, by=2), channel] <- y23
imgoutputhr[, seq(2, 2*n_col, by=2), channel] <- y14
}
img_out<- Image(imgoutputhr, colormode="Color")
display(img_out)
#writeImage(img_out, paste0(anotherdir,  "img", "_", sprintf("%04d", i), ".jpg"))
### step 4. report test MSE and PSNR
testimgHR <- readImage(paste0(HR_dir,  "img", "_", sprintf("%04d", i), ".jpg"))
mse<-c(mse,mean((imgoutputhr - testimgHR)^2))
mse
seq(2, 2*lryd, by=2)
seq(2, 2*lryd, 2)
for(l in 1:3){
y13 <- as.vector(t(predMat_array[, c(1,3),l] + LRcenter[,,l]))
y24 <- as.vector(t(predMat_array[, c(2,4),l] + LRcenter[,,l]))
imgoutputhr[, seq(1, 2*lrxd-1, 2), l] <- y13
imgoutputhr[, seq(2, 2*lryd, 2), l] <- y24
}
imgLR <- readImage(paste0(LR_dir,  "img", "_", sprintf("%04d", i), ".jpg"))
pathHR <- paste0(HR_dir,  "img", "_", sprintf("%04d", i), ".jpg")
featMat <- array(NA, c(dim(imgLR)[1] * dim(imgLR)[2], 8, 3))
### step 1. for each pixel and each channel in imgLR:
###           save (the neighbor 8 pixels - central pixel) in featMat
###           tips: padding zeros for boundary points
lrxd<- dim(imgLR)[2]
lryd<- dim(imgLR)[1]
M1<- rbind(rep(0, lrxd+2), cbind(rep(0, lryd), as.matrix(imgLR[ , , 1]), rep(0, lryd)), rep(0, lrxd+2))
M2<- rbind(rep(0, lrxd+2), cbind(rep(0, lryd), as.matrix(imgLR[ , , 2]), rep(0, lryd)), rep(0, lrxd+2))
M3<- rbind(rep(0, lrxd+2), cbind(rep(0, lryd), as.matrix(imgLR[ , , 3]), rep(0, lryd)), rep(0, lrxd+2))
PixelM<- array(0, c(lryd+2, lrxd+2, 3))
PixelM[ , , 1]<- M1
PixelM[ , , 2]<- M2
PixelM[ , , 3]<- M3
x<-rep(1:lrxd,each=lryd)
y<-rep(1:lryd,lrxd)
Features<- mapply(get_features_LR, x+1, y+1)
featMat[, , 1]<- t(Features[1:8, ])
featMat[, , 2]<- t(Features[9:16, ])
featMat[, , 3]<- t(Features[17:24, ])
### step 2. apply the modelList over featMat
predMat <- test(modelList, featMat)
### step 3. recover high-resolution from predMat and save in HR_dir
predMat_array <- array(predMat, c(dim(featMat)[1], 4, 3))
imgoutputhr<-array(NA,c(lryd*2,lrxd*2,3))
LRcenter <- array(imgLR, c(lryd*lrxd, 1, 3))
for(l in 1:3){
y13 <- as.vector(t(predMat_array[, c(1,3),l] + LRcenter[,,l]))
y24 <- as.vector(t(predMat_array[, c(2,4),l] + LRcenter[,,l]))
imgoutputhr[, seq(1, 2*lrxd-1, 2), l] <- y13
imgoutputhr[, seq(2, 2*lryd, 2), l] <- y24
}
lrxd
for(l in 1:3){
y13 <- as.vector(t(predMat_array[, c(1,3),l] + LRcenter[,,l]))
y24 <- as.vector(t(predMat_array[, c(2,4),l] + LRcenter[,,l]))
imgoutputhr[, seq(1, 2*lrxd-1, 2), l] <- y13
imgoutputhr[, seq(2, 2*lrxd, 2), l] <- y24
}
img_out<- Image(imgoutputhr, colormode="Color")
display(img_out)
#writeImage(img_out, paste0(anotherdir,  "img", "_", sprintf("%04d", i), ".jpg"))
### step 4. report test MSE and PSNR
testimgHR <- readImage(paste0(HR_dir,  "img", "_", sprintf("%04d", i), ".jpg"))
mse<-c(mse,mean((imgoutputhr - testimgHR)^2))
mse
mse<-c(mse,mean((predMat - testimgHR)^2))
mse
LRcenter <- array(imgLR, c(lryd*lrxd, 1, 3))
predMat_recov<-array(NA,c(n_col*n_row, 4, 3))
predMat_recov[,1,]<-LRcenter+predMat_recov[,1,]
predMat_recov[,1,]
?rep
?mbind
?cind
?cbind
?abind
predMat_recov<-abind(LRcenter,LRcenter,LRcenter,LRcenter,along=1)
predMat_recov
predMat_recov<-abind(LRcenter,LRcenter,LRcenter,LRcenter,along=2)
predMat_recov
predMat_recov<-predMat_array+predMat_recov
mse<-c(mse,mean((predMat_recov - testimgHR)^2))
predMat_recov
testimgHR
mse<-c(mse,mean((as.numeric(predMat_recov) - testimgHR)^2))
mse
### step 3. recover high-resolution from predMat and save in HR_dir
predMat_array <- array(predMat, c(dim(featMat)[1], 4, 3))
LRcenter <- array(imgLR, c(lryd*lrxd, 1, 3))
LRcenter
LRcenter[1,,2]
predMat_recov<-abind(LRcenter,LRcenter,LRcenter,LRcenter,along=2)
predMat[1,,2]
predMat_recov[1,,2]
predMat_array
### step 3. recover high-resolution from predMat and save in HR_dir
predMat_array <- array(predMat, c(dim(featMat)[1], 4, 3))
imgoutputhr<-array(NA,c(lryd*2,lrxd*2,3))
LRcenter <- array(imgLR, c(lryd*lrxd, 1, 3))
predMat_recov<-abind(LRcenter,LRcenter,LRcenter,LRcenter,along=2)
predMat_recov<-predMat_array+predMat_recov
mse<-c(mse,mean((imgoutputhr - testimgHR)^2))
mse
#writeImage(img_out, paste0(anotherdir,  "img", "_", sprintf("%04d", i), ".jpg"))
### step 4. report test MSE and PSNR
testimgHR <- readImage(paste0(HR_dir,  "img", "_", sprintf("%04d", i), ".jpg"))
mse<-c(mse,mean((imgoutputhr - testimgHR)^2))
for(l in 1:3){
y13 <- as.vector(t(predMat_array[, c(1,3),l] + LRcenter[,,l]))
y24 <- as.vector(t(predMat_array[, c(2,4),l] + LRcenter[,,l]))
imgoutputhr[, seq(1, 2*lrxd-1, 2), l] <- y13
imgoutputhr[, seq(2, 2*lrxd, 2), l] <- y24
}
mse<-c(mse,mean((imgoutputhr - testimgHR)^2))
mse
mse<-c()
LR_dir
writeImage(img_out, paste0("../data/train/testHR",  "img", "_", sprintf("%04d", i), ".jpg"))
writeImage(img_out, paste0("../data/train/testHR/",  "img", "_", sprintf("%04d", i), ".jpg"))
imgLR <- readImage(paste0(LR_dir,  "img", "_", sprintf("%04d", i), ".jpg"))
pathHR <- paste0(HR_dir,  "img", "_", sprintf("%04d", i), ".jpg")
featMat <- array(NA, c(dim(imgLR)[1] * dim(imgLR)[2], 8, 3))
### step 1. for each pixel and each channel in imgLR:
###           save (the neighbor 8 pixels - central pixel) in featMat
###           tips: padding zeros for boundary points
lrxd<- dim(imgLR)[2]
lryd<- dim(imgLR)[1]
M1<- rbind(rep(0, lrxd+2), cbind(rep(0, lryd), as.matrix(imgLR[ , , 1]), rep(0, lryd)), rep(0, lrxd+2))
M2<- rbind(rep(0, lrxd+2), cbind(rep(0, lryd), as.matrix(imgLR[ , , 2]), rep(0, lryd)), rep(0, lrxd+2))
M3<- rbind(rep(0, lrxd+2), cbind(rep(0, lryd), as.matrix(imgLR[ , , 3]), rep(0, lryd)), rep(0, lrxd+2))
PixelM<- array(0, c(lryd+2, lrxd+2, 3))
PixelM[ , , 1]<- M1
PixelM[ , , 2]<- M2
PixelM[ , , 3]<- M3
x<-rep(1:lrxd,each=lryd)
y<-rep(1:lryd,lrxd)
Features<- mapply(get_features_LR, x+1, y+1)
featMat[, , 1]<- t(Features[1:8, ])
featMat[, , 2]<- t(Features[9:16, ])
featMat[, , 3]<- t(Features[17:24, ])
### step 2. apply the modelList over featMat
predMat <- test(modelList, featMat)
### step 3. recover high-resolution from predMat and save in HR_dir
predMat_array <- array(predMat, c(dim(featMat)[1], 4, 3))
imgoutputhr<-array(NA,c(lryd*2,lrxd*2,3))
LRcenter <- array(imgLR, c(lryd*lrxd, 1, 3))
predMat_recov<-abind(LRcenter,LRcenter,LRcenter,LRcenter,along=2)
predMat_recov<-predMat_array+predMat_recov
for(l in 1:3){
y13 <- as.vector(t(predMat_array[, c(1,3),l] + LRcenter[,,l]))
y24 <- as.vector(t(predMat_array[, c(2,4),l] + LRcenter[,,l]))
imgoutputhr[, seq(1, 2*lrxd-1, 2), l] <- y13
imgoutputhr[, seq(2, 2*lrxd, 2), l] <- y24
}
img_out<- Image(imgoutputhr, colormode="Color")
display(img_out)
### step 4. report test MSE and PSNR
testimgHR <- readImage(paste0(HR_dir,  "img", "_", sprintf("%04d", i), ".jpg"))
mse<-c(mse,mean((imgoutputhr - testimgHR)^2))
mse
y13 <- as.vector(t(predMat_recov[, c(1,3),l] ))
LRcenter <- array(imgLR, c(lryd*lrxd, 1, 3))
predMat_recov<-abind(LRcenter,LRcenter,LRcenter,LRcenter,along=2)
predMat_recov<-predMat_array+predMat_recov
for(l in 1:3){
y13 <- as.vector(t(predMat_recov[, c(1,3),l] ))
y24 <- as.vector(t(predMat_recov[, c(2,4),l] ))
imgoutputhr[, seq(1, 2*lrxd-1, 2), l] <- y13
imgoutputhr[, seq(2, 2*lrxd, 2), l] <- y24
}
img_out<- Image(imgoutputhr, colormode="Color")
display(img_out)
### step 4. report test MSE and PSNR
testimgHR <- readImage(paste0(HR_dir,  "img", "_", sprintf("%04d", i), ".jpg"))
mse<-c(mse,mean((imgoutputhr - testimgHR)^2))
mse
i=4
i=2
n_files <- length(index)
get_features_LR<- function(lr_x, lr_y){
output<- array(0,c(8, 3))
Around<- PixelM[c(lr_y-1,lr_y,lr_y+1), c(lr_x-1, lr_x, lr_x+1), ]
Scaled<- Around - rep(Around[2,2, ], each=9)
output[1:3, ]<- Scaled[1, , ]
output[4:5, ]<- Scaled[2, c(1, 3), ]
output[6:8, ]<- Scaled[3, , ]
return(output)
}
imgLR <- readImage(paste0(LR_dir,  "img", "_", sprintf("%04d", i), ".jpg"))
pathHR <- paste0(HR_dir,  "img", "_", sprintf("%04d", i), ".jpg")
featMat <- array(NA, c(dim(imgLR)[1] * dim(imgLR)[2], 8, 3))
### step 1. for each pixel and each channel in imgLR:
###           save (the neighbor 8 pixels - central pixel) in featMat
###           tips: padding zeros for boundary points
lrxd<- dim(imgLR)[2]
lryd<- dim(imgLR)[1]
M1<- rbind(rep(0, lrxd+2), cbind(rep(0, lryd), as.matrix(imgLR[ , , 1]), rep(0, lryd)), rep(0, lrxd+2))
M2<- rbind(rep(0, lrxd+2), cbind(rep(0, lryd), as.matrix(imgLR[ , , 2]), rep(0, lryd)), rep(0, lrxd+2))
M3<- rbind(rep(0, lrxd+2), cbind(rep(0, lryd), as.matrix(imgLR[ , , 3]), rep(0, lryd)), rep(0, lrxd+2))
PixelM<- array(0, c(lryd+2, lrxd+2, 3))
PixelM[ , , 1]<- M1
PixelM[ , , 2]<- M2
PixelM[ , , 3]<- M3
x<-rep(1:lrxd,each=lryd)
y<-rep(1:lryd,lrxd)
Features<- mapply(get_features_LR, x+1, y+1)
featMat[, , 1]<- t(Features[1:8, ])
featMat[, , 2]<- t(Features[9:16, ])
featMat[, , 3]<- t(Features[17:24, ])
### step 2. apply the modelList over featMat
predMat <- test(modelList, featMat)
### step 3. recover high-resolution from predMat and save in HR_dir
predMat_array <- array(predMat, c(dim(featMat)[1], 4, 3))
imgoutputhr<-array(NA,c(lryd*2,lrxd*2,3))
LRcenter <- array(imgLR, c(lryd*lrxd, 1, 3))
predMat_recov<-abind(LRcenter,LRcenter,LRcenter,LRcenter,along=2)
predMat_recov<-predMat_array+predMat_recov
for(l in 1:3){
y13 <- as.vector(t(predMat_recov[, c(1,3),l] ))
y24 <- as.vector(t(predMat_recov[, c(2,4),l] ))
imgoutputhr[, seq(1, 2*lrxd-1, 2), l] <- y13
imgoutputhr[, seq(2, 2*lrxd, 2), l] <- y24
}
img_out<- Image(imgoutputhr, colormode="Color")
### step 4. report test MSE and PSNR
testimgHR <- readImage(paste0(HR_dir,  "img", "_", sprintf("%04d", i), ".jpg"))
mse<-c(mse,mean((imgoutputhr - testimgHR)^2))
mse
knitr::opts_chunk$set(echo = TRUE)
men_bach<-read.table("men30bach.txt")
?read.table
men_bach<-read.table("men30bach.txt",sep="\s")
men_bach<-read.table("men30bach.txt",sep="\\s")
men_bach<-read.table("men30bach.txt",sep="[\n ]")
men_bach<-read.table("men30bach.txt",sep=" ")
men_bach<-read.csv("men30bach.txt",sep=" ")
men_bach
men_bach<-read.csv("men30bach.txt",header=F,sep=" ")
men_bach
men_bach<-as.numeric(read.csv("men30bach.txt",header=F,sep=" "))
men_bach<-as.matrix(read.csv("men30bach.txt",header=F,sep=" "))
men_bach
men_bach<-as.numeric(as.matrix(read.csv("men30bach.txt",header=F,sep=" ")))
men_batch
men_bach
men_bach<-na.omit(men_bach)
men_bach
men_bach<-as.numeric(na.omit(men_bach))
men_bach
men_nobach<-read.table("men30nobach.txt")
men_bach<-as.numeric(as.matrix(read.csv("men30bach.txt",header=F,sep=" ")))
men_bach<-as.numeric(na.omit(men_bach))
men_nobach<-as.numeric(as.matrix(read.csv("men30nobach.txt",header=F,sep=" ")))
men_nobach<-as.numeric(na.omit(men_nobach))
men_nobach
men_bach
n_bach<-length(men_bach)
y_bach<-sum(men_bach)
n_nobach<-length(men_nobach)
y_nobach<-sum(men_nobach)
n_bach
y_bach
n_nobach
y_nobach
#theta Gamma(2,1)
a<-2
b<-1
#bach
n_bach<-length(men_bach)
y_bach<-sum(men_bach)
a+y_bach
b+n_bach
n_nobach
y_nobach
yb<-rnbinom(5000,size=56,mu=56/59)#with bachelor
yn<-rnbinom(5000,size=307,mu=307/219)#without bachelor
plot(ya)
ya<-rnbinom(5000,size=56,mu=56/59)#with bachelor
yb<-rnbinom(5000,size=307,mu=307/219)#without bachelor
plot(ya)
hist(ya)
plot(ya)
hist(ya)
hist(ya,xlim=c(-0.5,6.5),breaks=6)
hist(ya,breaks=6)
set.seed(2019)
ya<-rnbinom(5000,size=56,mu=56/59)#with bachelor
yb<-rnbinom(5000,size=307,mu=307/219)#without bachelor
hist(ya,breaks=6)
plot(yb,breaks=6)
plot(yb,breaks=10)
hist(yb,breaks=7)
hist(ya,breaks=6,main="Posterior Predictive Distribution for Bachelors")
?hist
hist(ya,breaks=6,freq=F,main="Posterior Predictive Distribution for Bachelors",ylab="number of children of men with bachelor's degrees")
hist(ya,breaks=6,freq=F,main="Posterior Predictive Distribution for Bachelors",xlab="number of children of men with bachelor's degrees")
hist(yb,breaks=7,freq=F,main="Posterior Predictive Distribution for NonBachelors",xlab="number of children of men without bachelor's degrees")
a+y_bach
b+n_bach
b+n_nobach
a+y_nobach
set.seed(2019)
ya<-rnbinom(5000,size=(a+y_bach),mu=(a+y_bach)/(b+n_bach))#with bachelor
yb<-rnbinom(5000,size=(a+y_nobach),mu=(a+y_nobach)/(b+n_nobach))#without bachelor
hist(ya,breaks=6,freq=F,main="Posterior Predictive Distribution for Bachelors",xlab="number of children of men with bachelor's degrees")
hist(yb,breaks=7,freq=F,main="Posterior Predictive Distribution for NonBachelors",xlab="number of children of men without bachelor's degrees")
?rgamma
?quantile
thetaa<-rgamma(5000,(a+y_bach),(b+n_bach))
thetab<-rgamma(5000,(a+y_nobach),(b+n_nobach))
quantile((thetab-thetaa),c(0.025,0.975))
thetaa<-rgamma(5000,(a+y_bach),(b+n_bach))
thetab<-rgamma(5000,(a+y_nobach),(b+n_nobach))
quantile((thetab-thetaa),c(0.025,0.975))
quantile((yb-ya),c(0.025,0.975))
hist(ya,breaks=6,freq=F,main="Posterior Predictive Distribution for Bachelors",xlab="number of children of men with bachelor's degrees")
sum(ya==0)/n_bach
sum(ya==0)/5000
sum(ya==1)/5000
sum(ya==0)/5000
set.seed(2019)
ya<-rnbinom(5000,size=(a+y_bach),mu=(a+y_bach)/(b+n_bach))#with bachelor
yb<-rnbinom(5000,size=(a+y_nobach),mu=(a+y_nobach)/(b+n_nobach))#without bachelor
hist(ya,breaks=6,freq=F,main="Posterior Predictive Distribution for Bachelors",xlab="number of children of men with bachelor's degrees")
hist(yb,breaks=7,freq=F,main="Posterior Predictive Distribution for NonBachelors",xlab="number of children of men without bachelor's degrees")
sum(ya==0)/5000
sum(yb==0)/5000
hist(ya,breaks=7,freq=F,main="Posterior Predictive Distribution for Bachelors",xlab="number of children of men with bachelor's degrees")
hist(ya,breaks=10,freq=F,main="Posterior Predictive Distribution for Bachelors",xlab="number of children of men with bachelor's degrees")
hist(ya,breaks=7,freq=F,main="Posterior Predictive Distribution for Bachelors",xlab="number of children of men with bachelor's degrees")
bar(ya,breaks=7,freq=F,main="Posterior Predictive Distribution for Bachelors",xlab="number of children of men with bachelor's degrees")
barplot(ya,breaks=7,freq=F,main="Posterior Predictive Distribution for Bachelors",xlab="number of children of men with bachelor's degrees")
barplot(ya,main="Posterior Predictive Distribution for Bachelors",xlab="number of children of men with bachelor's degrees")
hist(ya,breaks=7,freq=F,main="Posterior Predictive Distribution for Bachelors",xlab="number of children of men with bachelor's degrees")
hist(yb,breaks=8,freq=F,main="Posterior Predictive Distribution for NonBachelors",xlab="number of children of men without bachelor's degrees")
hist(ya,xlim=c(-0.5,6.5),breaks=7,freq=F,main="Posterior Predictive Distribution for Bachelors",xlab="number of children of men with bachelor's degrees")
hist(ya,xlim=c(-0.5,6.5),breaks=10,freq=F,main="Posterior Predictive Distribution for Bachelors",xlab="number of children of men with bachelor's degrees")
hist(yb,breaks=10,freq=F,main="Posterior Predictive Distribution for NonBachelors",xlab="number of children of men without bachelor's degrees")
>hist
?hist
hist(ya,breaks=0.5+0:6,freq=F,main="Posterior Predictive Distribution for Bachelors",xlab="number of children of men with bachelor's degrees")
hist(ya,breaks=0.5+(0:6),freq=F,main="Posterior Predictive Distribution for Bachelors",xlab="number of children of men with bachelor's degrees")
hist(ya,breaks=(0.5+(0:6)),freq=F,main="Posterior Predictive Distribution for Bachelors",xlab="number of children of men with bachelor's degrees")
(0.5+(0:6))
hist(ya,breaks=c(-0.5,0.5+(0:6)),freq=F,main="Posterior Predictive Distribution for Bachelors",xlab="number of children of men with bachelor's degrees")
hist(yb,breaks=c(-0.5,0.5+(0:7)),freq=F,main="Posterior Predictive Distribution for NonBachelors",xlab="number of children of men without bachelor's degrees")
hist(ya,breaks=c(-0.5,0.5+(0:6)),freq=F,main="Posterior Predictive Distribution for Bachelors",xlab="number of children of men with bachelor's degrees")
hist(yb,breaks=c(-0.5,0.5+(0:7)),freq=F,main="Posterior Predictive Distribution for NonBachelors",xlab="number of children of men without bachelor's degrees")
set.seed(2019)
ya<-rnbinom(5000,size=(a+y_bach),mu=(a+y_bach)/(b+n_bach))#with bachelor
yb<-rnbinom(5000,size=(a+y_nobach),mu=(a+y_nobach)/(b+n_nobach))#without bachelor
hist(ya,breaks=c(-0.5,0.5+(0:6)),freq=F,main="Posterior Predictive Distribution for Bachelors",xlab="number of children of men with bachelor's degrees")
hist(yb,breaks=c(-0.5,0.5+(0:7)),freq=F,main="Posterior Predictive Distribution for NonBachelors",xlab="number of children of men without bachelor's degrees")
table(yb)
table(yb)/n_nobach
table(y_nobach)/n_nobach
table(men_nobach)/n_nobach
cunsum(table(men_nobach)/n_nobach)
cumsum(table(men_nobach)/n_nobach)
dgamma(1.4)
?dgamma
dgamma(0:6,1.4)
pgamma(0:6,1.4)
dgamma(0:6,1.4)
dpoisson(0:6,1.4)
dpois(0:6,1.4)
table(men_nobach)/n_nobach
table(men_nobach)/n_nobach
dpois(0:6,1.4)
0.33944/0.24659
i=1
y<-rpois(218,thetab[i])
counts0[i]<-sum(y==0)
counts0<-c()
counts1<-c()
counts0[i]<-sum(y==0)
counts1[i]<-sum(y==1)
counts0
counts1
counts0<-c()
counts1<-c()
for(i in 1:5000){
y<-rpois(218,thetab[i])
counts0[i]<-sum(y==0)
counts1[i]<-sum(y==1)
}
plot(counts0,counts1)
counts0b<-sum(men_nobach==0)
counts1b<-sum(men_nobach==1)
counts0<-c()
counts1<-c()
for(i in 1:5000){
y<-rpois(218,thetab[i])
counts0[i]<-sum(y==0)
counts1[i]<-sum(y==1)
}
plot(counts0,counts1)
counts0b<-sum(men_nobach==0)
counts1b<-sum(men_nobach==1)
points(counts0b,counts1b,col=2)
cat("Time for constructing training features=", tm_feature_train[1], "s \n")
cat("Time for constructing testing features=", tm_feature_test[1], "s \n")
source("../lib/superResolution.R")
test_dir <- "../data/train/" # This will be modified for different data sets.
test_LR_dir <- paste(test_dir, "LR/", sep="")
test_HR_dir <- paste(test_dir, "HR/", sep="")
tm_test=NA
if(run.test){
load(file="../output/fit_train.RData")
tm_test <- system.time(performance<-superResolution(train_LR_dir, train_HR_dir,fit_train,index=ts))
}
cat("Time for constructing training features=", tm_feature_train[1], "s \n")
cat("Time for constructing testing features=", tm_feature_test[1], "s \n")
cat("Time for constructing training features=", tm_feature_train[1], "s \n")
cat("Time for training model=", tm_train[1], "s \n")
cat("Time for super-resolution=", tm_test[1], "s \n")
performance[1]
performance[2]
#test mse
performance[1]
#test psnr
performance[2]
a_theta<-2
b_theta<-1
a_gamma<-c(8,16,32,64,128)
b_gamma<-a_gamma
theta1<-mean(men_bach)
gamma1<-mean(men_nobach)/theta1
theta1
gamma1
a_theta<-2
b_theta<-1
Agamma<-c(8,16,32,64,128)
Bgamma<-a_gamma
theta1<-mean(men_bach)
gamma1<-mean(men_nobach)/theta1
S<-5000
e<-c()
set.seed(158)
for(i in 1:5){
a_gamma<-Agamma[i]
b_gamma<-Bgamma[i]
PHI<-matrix(nrow=S,ncol=2)
PHI[1,]<-phi<-c(theta1,gamma1)
for(s in 2:S) {
phi[1]<-rgamma(1,y_bach+y_nobach+a_theta,b_theta+n_bach+n_nobach*phi[2])
phi[2]<-rgamma(1,y_nobach+a_gamma,b_gamma+n_nobach*phi[1])
PHI[s,]<-phi
}
e[i]<-mean(PHI[,1]*PHI[,2]-PHI[,1])
}
for(i in 1:5){
ar<-a_gamma[i]
br<-b_gamma[i]
gammaR<-rgamma(5000,ar,br)
thetaA<-rgamma(5000,a_theta,b_theta)
thetaB<-thetaA*gammaR
}
a_theta<-2
b_theta<-1
Agamma<-c(8,16,32,64,128)
Bgamma<-a_gamma
theta1<-mean(men_bach)
gamma1<-mean(men_nobach)/theta1
S<-5000
e<-c()
set.seed(158)
for(i in 1:5){
a_gamma<-Agamma[i]
b_gamma<-Bgamma[i]
PHI<-matrix(nrow=S,ncol=2)
PHI[1,]<-phi<-c(theta1,gamma1)
for(s in 2:S) {
phi[1]<-rgamma(1,y_bach+y_nobach+a_theta,b_theta+n_bach+n_nobach*phi[2])
phi[2]<-rgamma(1,y_nobach+a_gamma,b_gamma+n_nobach*phi[1])
PHI[s,]<-phi
}
e[i]<-mean(PHI[,1]*PHI[,2]-PHI[,1])
}
